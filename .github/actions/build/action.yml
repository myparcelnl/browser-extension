name: 'Build extensions'
description: 'Build all extensions and upload an artifact with the zips'

inputs:
  node-version:
    description: 'The Node version to use'
    required: true

runs:
  using: composite
  steps:
    - name: 'Create hashes for caching'
      id: hash
      env:
        # The shared part of the hash.
        HASH_SHARED: ${{ hashFiles('**/yarn.lock', '**/package.json', 'tsconfig.json', '.github/actions/build/action.yml') }}
        # The hash for the builder that will build the extension
        HASH_BUILDER: ${{ hashFiles('private/build.ts', 'src/constants.ts') }}
        # The hash for the extension build
        HASH_EXTENSION: ${{ hashFiles('vite.config.ts', '_locales/**/*', 'assets/**/*', 'build/**/*', 'private/**/*', 'src/**/*') }}
      shell: bash
      # language=bash
      run: |
        echo "hash-builder=$HASH_SHARED-$HASH_BUILDER" >> $GITHUB_OUTPUT
        echo "hash-source=$HASH_SHARED-$HASH_EXTENSION" >> $GITHUB_OUTPUT

    - name: 'Cache extension build'
      uses: actions/cache@v4
      id: dist-cache
      with:
        path: dist/*.zip
        key: '${{ runner.os }}-dist-${{ steps.hash.outputs.hash-source }}'

    - name: 'Cache extension builder'
      uses: actions/cache@v4
      id: bin-cache
      if: steps.dist-cache.outputs.cache-hit != 'true'
      with:
        path: bin
        key: '${{ runner.os }}-bin-${{ steps.hash.outputs.hash-builder }}'
        restore-keys: |
          ${{ runner.os }}-bin-

    - uses: myparcelnl/actions/yarn-install@v4
      if: steps.dist-cache.outputs.cache-hit != 'true'
      with:
        node-version: ${{ inputs.node-version }}

    - name: 'Build builder'
      if: steps.dist-cache.outputs.cache-hit != 'true' && steps.bin-cache.outputs.cache-hit != 'true'
      shell: bash
      #language=bash
      run: |
        yarn prebuild

    - name: 'Build extensions'
      if: steps.dist-cache.outputs.cache-hit != 'true'
      shell: bash
      #language=bash
      run: |
        node bin/build.js --environment production --zip
        node bin/build.js --environment testing --zip

    - uses: actions/upload-artifact@v4
      with:
        name: build
        path: dist/*.zip
